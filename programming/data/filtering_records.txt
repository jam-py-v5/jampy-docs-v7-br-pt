===================
Filtrando registros
===================

Existem três maneiras de definir quais registros o 
:doc:`dataset <dataset>` de um item irá obter da tabela do banco de dados
quando o método ``open`` for chamado:

* especificar o parâmetro (opção) ``where`` do método ``open``, 
* chamar o método ``set_where`` antes de chamar o método ``open``,
* ou usar 
  :doc:`filtros <filters>`.

Quando o parâmetro ``where`` é especificado, ele sempre será utilizado mesmo que o 
método ``set_where`` tenha sido chamado ou que o item tenha filtros com valores definidos.

Quando o parâmetro ``where`` é omitido, os parâmetros passados para o método ``set_where`` 
serão utilizados.

Por exemplo, no cliente, no seguinte código, na primeira chamada do método ``open`` 
a opção ``where`` será usada para filtrar os registros, na segunda chamada os parâmetros 
passados para ``set_where`` e apenas na terceira vez será usado o valor do filtro 
``invoicedate1``.


.. code-block:: js

    function test(invoices) {
        var date = new Date(new Date().setYear(new Date().getFullYear() - 1));
        
        invoices.clear_filters();
        invoices.filters.invoicedate1.value = date;
        
        invoices.open({where: {invoicedate__ge: date}}); 
        
        invoices.set_where({invoicedate__ge: date});
        invoices.open();
        
        invoices.open();
    }

    
    date = datetime.datetime.now() - datetime.timedelta(days=3*365)

O mesmo código no servidor fica da seguinte forma:

.. code-block:: py

    from datetime import datetime
    
    def test(invoices):
        date = datetime.now()
        date = date.replace(year=date.year-1)    
    
        invoices.clear_filters()
        invoices.filters.invoicedate1.value = date
        
        invoices.open(where={'invoicedate__ge': date})
        
        invoices.set_where(invoicedate__ge=date)
        invoices.open()
        
        invoices.open()

No framework, os seguintes símbolos e constantes correspondentes são definidos 
para filtrar registros:

.. csv-table:: 
   :header: Filter type, Filter symbol, Constant, SQL Operator
   :widths: 20, 15, 10, 70

   ``EQ``, 'eq', ``FILTER_EQ``, ``=``
   ``NE``, 'ne', ``FILTER_NE``, ``<>``
   ``LT``, 'lt', ``FILTER_LT``, ``<``
   ``LE``, 'le', ``FILTER_LE``, ``<=``
   ``GT``, 'gt', ``FILTER_GT``, ``>`` 
   ``GE``, 'ge', ``FILTER_GE``, ``>=``
   ``IN``, 'in', ``FILTER_IN``, ``IN``
   ``NOT IN``, 'not_in', ``FILTER_NOT_IN``, ``NOT IN``
   ``RANGE``, 'range', ``FILTER_RANGE``, ``BETWEEN``
   ``ISNULL``, 'isnull', ``FILTER_ISNULL``, ``IS NULL``
   ``EXACT``, 'exact', ``FILTER_EXACT``, ``=``
   ``CONTAINS``, 'contains', ``FILTER_CONTAINS``, usa ``LIKE`` com o caractere "%" para encontrar registros onde o valor do campo contém a string de pesquisa
   ``STARTWITH``, 'startwith', ``FILTER_STARTWITH``, usa ``LIKE`` com o caractere "%" para encontrar registros onde o valor do campo começa com a string de pesquisa
   ``ENDWITH``, 'endwith', ``FILTER_ENDWITH``, usa ``LIKE`` com o caractere "%" para encontrar registros onde o valor do campo termina com a string de pesquisa
   ``CONTAINS ALL``, 'contains_all', ``FILTER_CONTAINS_ALL``, usa ``LIKE`` com o caractere "%" para encontrar registros onde o valor do campo contém todas as palavras da string de pesquisa

O parâmetro ``where`` do método ``open`` é um dicionário cujas chaves 
são os nomes dos campos seguidos, após dois sublinhados, por um símbolo de filtro. 
Para o filtro ``EQ``, o símbolo de filtro '__eq' pode ser omitido. 
Por exemplo, ``{'id': 100}`` é equivalente a ``{'id__eq': 100}``.


Veja também
============

:doc:`Dataset <dataset>`

:doc:`Filters <filters>`

Cliente
-------

:doc:`open </refs/client/item/m_open>`

:doc:`set_where </refs/client/item/m_set_where>`

Servidor
--------

:doc:`open </refs/server/item/m_open>`

:doc:`set_where </refs/server/item/m_set_where>`
