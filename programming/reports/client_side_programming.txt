=====================================
Programação de relatórios no cliente
=====================================

Para imprimir um relatório no cliente, use o método 
:doc:`print </refs/client/report/m_print>`. 

Como resultado da chamada dessa função, o cliente chama o método 
:doc:`create_param_form </refs/client/report/m_create_param_form>` 
para criar um formulário de edição dos parâmetros do relatório, com base no 
template HTML definido no arquivo index.html 
(consulte :doc:`Formulários </programming/interface/forms>`). 

Esse método, após criar o formulário, dispara os seguintes eventos:

* :doc:`on_param_form_created </refs/client/task/on_param_form_created>`
  da tarefa.

* :doc:`on_param_form_created </refs/client/reports/on_param_form_created>`
  do grupo de relatórios ao qual o relatório pertence, se definido.

* :doc:`on_param_form_created </refs/client/report/on_param_form_created>`
  do relatório, se definido.

O código padrão possui o manipulador de evento 
:doc:`on_param_form_created </refs/client/report/on_param_form_created>` 
definido para a tarefa. Nesse evento, o clique no botão **Imprimir** 
é conectado ao método 
:doc:`process_report </refs/client/report/m_process_report>` 
do relatório.

.. code-block:: js

    function on_param_form_created(item) {
        item.create_param_inputs(item.param_form.find(".edit-body"));
        item.param_form.find("#ok-btn").on('click.task', function() {
            item.process_report()
        });
        item.param_form.find("#cancel-btn").on('click.task', function() {
            item.close_param_form()
        });
    }
    
Por sua vez, o método 
:doc:`process_report </refs/client/report/m_process_report>`    
dispara os seguintes manipuladores de evento:

* :doc:`on_before_print_report </refs/client/reports/on_before_print_report>` 
  do grupo de relatórios

* :doc:`on_before_print_report </refs/client/report/on_before_print_report>` 
  do relatório

Nesses manipuladores de evento, o desenvolvedor pode definir alguns atributos 
comuns (no manipulador de evento do grupo de relatórios) ou específicos 
(no manipulador de evento do relatório) do relatório.

Por exemplo, no código padrão, há um manipulador de evento 
on_before_print_report do grupo de relatórios, no qual o atributo 
:doc:`extension </refs/client/report/at_extension>`
do relatório é definido:

.. code-block:: js

    function on_before_print_report(report) {
        var select;
        report.extension = 'pdf';
        if (report.param_form) {
            select = report.param_form.find('select');
            if (select && select.val()) {
                report.extension = select.val();
            }
        }
    }

No manipulador de evento a seguir, definido no módulo do cliente do relatório 
**invoice** da aplicação Demo, o valor do parâmetro **id** do relatório é definido:

.. code-block:: js

    function on_before_print_report(report) {
        report.id.value = report.task.invoices.id.value;
    }

Após isso, o método 
:doc:`process_report </refs/client/report/m_process_report>`    
envia uma solicitação assíncrona ao servidor para gerar o relatório
(consulte :doc:`Programação do lado do servidor <server_side_programming>`). 

O servidor retorna ao método uma URL para um arquivo com o relatório gerado.

Em seguida, o método verifica se o manipulador de evento 
:doc:`on_open_report </refs/client/reports/on_open_report>` do grupo de relatórios está definido. 
Se esse manipulador estiver definido, ele é chamado; caso contrário, 
verifica o 
:doc:`on_open_report </refs/client/report/on_open_report>` do relatório. 
Se estiver definido, ele é chamado.

Se nenhum desses eventos estiver definido, o relatório é aberto no navegador ou salvo em disco, 
dependendo do atributo 
:doc:`extension </refs/client/report/at_extension>` 
do relatório.





