==================
Criando um projeto
==================

Crie um novo diretório.

Acesse o diretório e execute no terminal:

.. code-block:: console

    $ jam-project.py

Os seguintes arquivos e pastas serão criados no diretório::

    /
        css/
        js/
        img/
        reports/
        static/
        admin.sqlite
        server.py
        index.html
        wsgi.py


Para iniciar o servidor web do Jam.py, execute o script ``server.py``.

.. code-block:: console

    $ ./server.py

.. note::
    Você pode especificar uma porta como parâmetro, por exemplo:

    .. code-block:: console

        $ ./server.py 8081

    Por padrão, a porta é 8080. Se você especificar outra porta, será necessário
    usá-la no navegador nos próximos passos.


Abra um navegador e acesse “/builder.html” no seu domínio local – por exemplo:

.. code-block:: console

    127.0.0.1:8080/builder.html

Você deverá ver o diálogo de seleção de idioma. Isso define o idioma utilizado na 
interface do usuário. Você pode selecionar o idioma a partir da lista de idiomas padrão, 
ou importar o seu próprio, usando o ícone de "pasta" à direita do campo de entrada. 
Consulte a página :doc:`Suporte a idiomas </admin/language_support>` para mais informações.  
Selecione seu idioma e pressione o botão OK.

.. image:: _images/lang_jampy.png
	:alt: Jam.py language dialog

Em seguida será exibido o diálogo de novo projeto. Preencha os seguintes campos:

* **Caption** – o nome do projeto que será exibido para os usuários.
* **Name** – o nome do projeto (tarefa) que será utilizado no código (Python ou JS)  
  para acessar o objeto da tarefa. Deve ser um identificador válido e curto em Python.  
  Este nome também será usado como prefixo ao criar uma tabela no banco de dados do projeto.
* **Tipo de BD** – selecione um tipo de banco de dados. Se o banco de dados não for Sqlite,  
  ele deve ser criado previamente e seus atributos devem ser inseridos nos  
  campos apropriados do formulário.  
  Para ver exemplos de configuração de banco de dados, :doc:`acesse o </admin/project/database>`.

.. image:: _images/project_params_jampy.png
    :align: center
    :alt: Configuração de novo projeto

Ao pressionar OK, a conexão com o banco de dados será verificada, e em caso  
de falha, uma mensagem de erro será exibida.


Exemplos de configurações de banco de dados
===========================================

.. admonition:: Adaptado de `Jam.py Design Tips`_

    O Jam.py oferece suporte a diversos servidores de banco de dados, como por exemplo: PostgreSQL_, MariaDB_, MySQL_, MSSQL_, Oracle_, Firebird_, IBM_, SQLite_ e SQLite com SQLCipher_.

    Se você estiver desenvolvendo um projeto pequeno ou algo que não pretende implantar em um ambiente de produção, o SQLite geralmente é a melhor opção, pois não exige a execução de um servidor separado. No entanto, o SQLite possui muitas diferenças em relação a outros bancos de dados, portanto, se você estiver trabalhando em algo mais complexo, é recomendável desenvolver com o mesmo banco de dados que será utilizado em produção.

    Além do backend do banco de dados, é necessário garantir que as bibliotecas de acesso ao banco estejam instaladas no Python.

    * Se estiver usando PostgreSQL, é necessário o pacote ``psycopg2`` ou ``psycopg2-binary``.
    * Se estiver usando MySQL ou MariaDB, é necessário o ``MySQLdb`` para Python 2.x. Para Python 3.x, são necessários os pacotes ``mysql-connector-python`` e ``mysqlclient``, além dos arquivos de desenvolvimento do cliente de banco de dados.
    * Se estiver usando MSSQL, é necessário o pacote ``pymssql``.
    * Se estiver usando Oracle, é necessário o `cx_Oracle`_, além dos headers (arquivos de desenvolvimento) do Python.
    * Se estiver usando SQLCipher_, é necessário o pacote ``sqlcipher3-binary`` para Linux. Para Windows há uma DLL standalone disponível.
    * Se estiver usando IBM_, são necessários os pacotes ``ibm_db`` e ``ibm_db_dbi``.
    * Se estiver usando Firebird, é necessário o pacote ``fdb``.
    * Para gerar relatórios, é necessário ter o **LibreOffice** instalado.


.. _Jam.py Design Tips: https://jampy-application-design-tips.readthedocs.io/
.. _PostgreSQL: https://www.postgresql.org/
.. _MariaDB: https://mariadb.org/
.. _MySQL: https://www.mysql.com/
.. _psycopg2: https://www.psycopg.org/
.. _SQLite: https://www.sqlite.org/
.. _cx_Oracle: https://oracle.github.io/python-cx_Oracle/
.. _Oracle: https://www.oracle.com/
.. _MSSQL: https://www.microsoft.com/en-au/sql-server/sql-server-downloads
.. _Firebird: https://firebirdsql.org/
.. _SQLCipher: https://github.com/sqlcipher
.. _IBM: https://www.ibm.com/support/pages/downloading-ibm-db2-version-115-linux-unix-and-windows
    
.. note::

    Para um banco de dados **SQLite**, quando um campo de item é excluído ou renomeado, ou uma chave estrangeira é criada, o  
    :doc:`Construtor de Aplicações </admin/index>`  
    cria uma nova tabela e copia os registros da antiga para ela.

Para banco de dados **SQLite**, o Jam.py não oferece suporte à importação de metadados em um 
projeto existente (um projeto com tabelas já criadas no banco de dados).  
Você só pode importar metadados em um projeto novo.

Se tudo correr bem, um novo projeto será criado e a árvore do projeto será exibida 
no Construtor de Aplicações.

.. image:: _images/adm_new_project_jampy.png
    :align: center
    :alt: Construtor de Aplicações do Jam.py

Agora, para visualizar o próprio projeto, abra uma nova aba no navegador e digite na 
barra de endereços:

.. code-block:: console

    127.0.0.1:8080


.. image:: _images/empty_project_jampy.png
	:align: center
	:alt: Jam.py project
